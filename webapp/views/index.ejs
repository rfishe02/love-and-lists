<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <title><%= title %></title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />

    <style>
      html {
        height: 100%;
      }
      body {
        height: 100%;
        background-color: #ffcbe4;
      }
      span:hover {
        cursor: pointer;
      }
      
      
    </style>

  </head>
  <body onload="loadTasks()">

    <!--<h1><%= title %></h1>
    <p>Welcome to <%= title %></p>-->

    <div class="container text-center pt-3 rounded shadow" style="height: 100%; background-color: white;">

      <div class="row justify-content-center">
        <div class="col-12 col-md-3 mb-3">
          <form id="newTaskForm">
            <div class="mb-3">
              <label for="newTaskInput" class="form-label">To-Do</label>
              <input type="text" class="form-control" id="newTaskInput" aria-describedby="newTaskHelp">
              <div id="newTaskHelp" class="form-text"></div>
            </div>
            <div style="text-align: left;">
              <button type="submit" class="btn btn-sm btn-primary shadow-sm">Add</button>
            </div>
          </form>
        </div>
      </div>

      <hr>

      <div class="row justify-content-center">

        <div class="col-12 col-md-3">
          <ul id="taskList" class="list-group list-group-flush">
            <!--<li class="list-group-item">An item</li>
            <li class="list-group-item">A second item</li>
            <li class="list-group-item">A third item</li>-->
          </ul>
        </div>

      </div>

    </div>

    <script>
      const form = document.getElementById('newTaskForm');
      const taskList = document.getElementById('taskList');

      function loadTasks() {
        fetch('http://localhost:3000/tasks/get?userID=1')
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json(); // Parse the response body as JSON
        })
        .then(data => {
          //console.log(data);
          for(row in data.tasks) {
            const newElement = createNewTaskElement(data.tasks[row].task_id, data.tasks[row].task_desc, data.tasks[row].task_status);
            taskList.append(newElement);
          }

        })
        .catch(error => {
          console.error('Task GET error:', error);
        });
      };

      function createNewTaskElement(taskID,taskDescription,taskStatus) {
        const newTask = document.createElement('li');

        newTask.setAttribute('class','list-group-item d-flex justify-content-between align-items-center');
        newTask.setAttribute('data-task-id',taskID);
        newTask.setAttribute('data-task-status',taskStatus);

        if(taskStatus == 0) {
          newTask.innerHTML = `
          <input class="form-check-input me-1" type="checkbox" value="" id="taskCheckbox${taskID}">
          <div id="taskDesc${taskID}">${taskDescription}</div>
          <span class="badge text-bg-light rounded-pill shadow-sm" style="font-size:12pt;">&times;</span>`;
        } else {
          newTask.innerHTML = `
          <input class="form-check-input me-1" type="checkbox" value="" id="taskCheckbox${taskID}" checked disabled>
          <div id="taskDesc${taskID}"><s>${taskDescription}</s></div>
          <span class="badge text-bg-light rounded-pill shadow-sm" style="font-size:12pt;">&times;</span>`;
        }

        return newTask;
      }

      function insertIntoList(item, list) {
        var firstComplete = null;
        
        for(var i = 0; i < list.children.length; i++) {
          if(list.children[i].getAttribute('data-task-status') == 1) {
            firstComplete = list.children[i];
            break;
          }
        }

        if(firstComplete !== null) {
          item.remove();
          list.insertBefore(item, firstComplete);
        } else {
          list.append(item);
        }
      }

      function addTaskToDB(taskDescription) {

        fetch('http://localhost:3000/tasks/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ taskDesc: taskDescription, userID: '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {

          const newElement = createNewTaskElement(data.task_id, taskDescription, 0);
          insertIntoList(newElement, taskList);

        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      }

      function markTaskAsClosedInDB(taskID) {

        fetch('http://localhost:3000/tasks/closed', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ taskID: taskID, userID: '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          console.log(data);
        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      }

      function deleteTaskFromDB (taskID) {

        fetch('http://localhost:3000/tasks/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ taskID: taskID, userID: '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          //console.log(data);
        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      }

      form.addEventListener('submit', function(event) {
        event.preventDefault();

        const taskDesc = document.getElementById('newTaskInput').value;
        addTaskToDB(taskDesc);

        form.reset();
      });

      taskList.addEventListener('click', function(event){
        const listItem = event.target.closest('li');
        const taskID = listItem.getAttribute('data-task-id');

        if(listItem != undefined) {
          if (event.target.tagName == 'INPUT') {     
            setTimeout(function () {

              markTaskAsClosedInDB(taskID);

              const input = listItem.getElementsByTagName('input')[0];
              input.disabled = true;
              input.checked = true;

              const taskDesc = document.getElementById('taskDesc'+taskID);
              taskDesc.innerHTML = `<s>${taskDesc.innerHTML}</s>`;

              insertIntoList(listItem, taskList);

              listItem.setAttribute('data-task-status',1);

            }, 1000);
          } else if (event.target.tagName == 'SPAN') {
            deleteTaskFromDB(taskID);
            listItem.remove();
          }
        }

      });

    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  </body>
</html>
