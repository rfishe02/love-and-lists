<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <title><%= title %></title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />

    <style>
      html {
        height: 100%;
        width: 100%;
      }

      body {
        height: 100%;
        background-color:  #ffd1e8;
        font: Helvetica, sans-serif;
      }

      a {
        color: #00B7FF;
      }

      #settings-space {
        background-color: white; 
        height: 100%; 
      }

      #rewards-space {
        background-color: white; 
        height: 100%; 
      }
      
      #settings-button:hover {
        cursor: pointer;
      }

      span:hover {
        cursor: pointer;
      }

      button:hover {
        cursor: pointer;
      }

      #main-navbar {
        background-color: #ffd1e8;
      }
      
    </style>

  </head>
  <body onload="appSetup()">

    <!--<h1><%= title %></h1>
    <p>Welcome to <%= title %></p>-->

    <nav id="main-navbar" class="navbar shadow-sm">
      <div class="container-fluid">
        <a class="navbar-brand" style="color: black;">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-suit-heart-fill" viewBox="0 0 16 16">
            <path d="M4 1c2.21 0 4 1.755 4 3.92C8 2.755 9.79 1 12 1s4 1.755 4 3.92c0 3.263-3.234 4.414-7.608 9.608a.513.513 0 0 1-.784 0C3.234 9.334 0 8.183 0 4.92 0 2.755 1.79 1 4 1"/>
          </svg>
          Love & Lists
        </a>
        
        <div>
          <button id="tasks-button" type="button" class="btn btn-dark btn-sm position-relative me-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check2-square" viewBox="0 0 16 16">
              <path d="M3 14.5A1.5 1.5 0 0 1 1.5 13V3A1.5 1.5 0 0 1 3 1.5h8a.5.5 0 0 1 0 1H3a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5h10a.5.5 0 0 0 .5-.5V8a.5.5 0 0 1 1 0v5a1.5 1.5 0 0 1-1.5 1.5z"/>
              <path d="m8.354 10.354 7-7a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0"/>
            </svg>
          </button>
          
          <button id="rewards-button" type="button" class="btn btn-dark btn-sm position-relative me-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-suit-heart-fill" viewBox="0 0 16 16">
              <path d="M4 1c2.21 0 4 1.755 4 3.92C8 2.755 9.79 1 12 1s4 1.755 4 3.92c0 3.263-3.234 4.414-7.608 9.608a.513.513 0 0 1-.784 0C3.234 9.334 0 8.183 0 4.92 0 2.755 1.79 1 4 1"/>
            </svg>
            <span id="rewards-badge" class="position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle" style="display: none;">
              <span class="visually-hidden">New alerts</span>
            </span>
          </button>

          <button id="settings-button" type="button" class="btn btn-dark btn-sm position-relative me-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16">
              <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
            </svg>
          </button>
        </div>
      </div>
    </nav>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
      <div id="reward-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <!--<img src="..." class="rounded me-2" alt="...">-->
          <div class="me-2" style="color: black;">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-suit-heart-fill" viewBox="0 0 16 16">
              <path d="M4 1c2.21 0 4 1.755 4 3.92C8 2.755 9.79 1 12 1s4 1.755 4 3.92c0 3.263-3.234 4.414-7.608 9.608a.513.513 0 0 1-.784 0C3.234 9.334 0 8.183 0 4.92 0 2.755 1.79 1 4 1"/>
            </svg>
          </div>
          <strong class="me-auto">New Reward</strong>
          <!--<small>11 mins ago</small>-->
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          You have a new reward to view!
        </div>
      </div>
    </div>

    <div id="chara-modal" class="modal" tabindex="-1" aria-labelledby="chara-modal-label" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <!--<h1 class="modal-title fs-5" id="chara-modal-label">Modal title</h1>-->
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="row justify-content-center">
              <img id="chara-modal-img" src="#" style="height: 275px; object-fit: cover;">
            </div>
            <div id="chara-modal-text" class="row mt-3 justify-content-center">
              
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-sm btn-secondary shadow-sm" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <div id="rewards-space" class="container pt-3" style="display: none;">

      
      
    </div>

    <div id="settings-space" class="container pt-3" style="display: none;">

      <div class="row justify-content-center">
        <div class="col-12 col-md-6">

          <h5>Character Settings</h5>
          <form id="chara-edit-form">
            <div class="mb-2">
              <!--<label for="chara-name" class="form-label">Character Name</label>-->
              <input type="text" class="form-control" id="chara-name" name="chara_name" placeholder="Enter a name">
            </div>

            <div class="mb-2">
              <select id="hair-select" name="hair_color" class="form-select" aria-label="Hair Color">
                <option value="" selected>Choose a hair color</option>
              </select>
            </div>

            <div class="mb-2">
              <select id="eye-select" name="eye_color" class="form-select" aria-label="Eye Color">
                <option value="" selected>Choose an eye color</option>
              </select>
            </div>

            <div class="mb-2" style="min-height: 90px;">
              <select id="archetype-select" name="chara_type" class="form-select" aria-label="Character Archetype" onchange="displayTypeHelp()">
                <option value="" aria-describedby="chara-type-help" selected>Choose an archetype</option>
              </select>
              <small id="chara-type-help" class="form-text text-muted"></small>
            </div>
            
            <div style="text-align: right;">
              <button type="submit" class="btn btn-sm btn-primary shadow-sm">Save</button>
            </div>
          </form>
        </div>
      </div>

    </div>

    <div id="tasks-space" class="container mt-3" style="display: block;">

      <div class="row justify-content-center" >
        <div class="col-10 col-md-6 text-center rounded shadow-sm" style="background-color: white;">

          <div class="row mt-3 justify-content-center">
            <div class="col">
              <form id="new-task-form">
                <div class="mb-2">
                  <label for="new-task-input" class="form-label">To-Do</label>
                  <input type="text" class="form-control" id="new-task-input" aria-describedby="new-task-help">
                  <div id="new-task-help" class="form-text"></div>
                </div>
                <div style="text-align: left;">
                  <button type="submit" class="btn btn-sm btn-primary shadow-sm">Add</button>
                </div>
              </form>
            </div>
          </div>
    
          <hr>
    
          <div class="row justify-content-center" style="min-height: 750px;">
            <div class="col">
              <ul id="task-list" class="list-group list-group-flush">
              </ul>
            </div>
          </div>
          
        </div>
      </div>

    </div>

    <script>
      

      function appSetup() {
        buildSettingsForm();
        loadTasks();
        loadChara();
      }

      function buildSettingsForm() {
        const hairSelect = document.getElementById('hair-select');
        const eyeSelect = document.getElementById('eye-select');
        const typeSelect = document.getElementById('archetype-select');

        hairColors = ['Black','Blonde','Brown','Red','White'];
        eyeColors = ['Blue','Brown','Green','Gray','Hazel'];
        charaTypes = ['Dandere','Deredere','Kuudere','Teasedere','Tsundere'];

        for(var i = 0; i < hairColors.length; i++) {
          const newOption = document.createElement('option');
          newOption.value = hairColors[i];
          newOption.text = hairColors[i];
          hairSelect.append(newOption);
        }

        for(var i = 0; i < eyeColors.length; i++) {
          const newOption = document.createElement('option');
          newOption.value = eyeColors[i];
          newOption.text = eyeColors[i];
          eyeSelect.append(newOption);
        }

        for(var i = 0; i < charaTypes.length; i++) {
          const newOption = document.createElement('option');
          newOption.value = charaTypes[i];
          newOption.text = charaTypes[i];
          typeSelect.append(newOption);
        }     
      }

      function displayTypeHelp() {
        const charaTypeDesc = ['',
          'An introverted character who becomes more expressive around someone they trust.'
          ,'A character who is consistently sweet, affectionate, and cheerful.'
          ,'A character that is outwardly aloof but secretly compassionate.'
          ,'A character who playfully teases others.'
          ,'A character that starts off as cold and aloof but later become warm and affectionate.'
        ];
        const typeIndex = document.getElementById('archetype-select').selectedIndex;

        document.getElementById('chara-type-help').innerHTML = charaTypeDesc[typeIndex];
      }

      function loadTasks() {
        fetch(window.location.origin + '/tasks/get?user_id=1')
        .then(response => {
          if (!response.ok) {
            throw new Error('Task response was not OK');
          }
          return response.json();
        })
        .then(data => {
          const taskList = document.getElementById('task-list');

          for(row in data.tasks) {
            const newElement = createNewTaskElement(data.tasks[row].task_id, data.tasks[row].task_desc, data.tasks[row].task_done);
            taskList.append(newElement);
          }

        })
        .catch(error => {
          console.error('Task GET error:', error);
        });
      };

      function loadChara() {
        fetch(window.location.origin + '/chara/get?chara_id=1&user_id=1')
        .then(response => {
          if (!response.ok) {
            throw new Error('Chara response was not OK');
          }
          return response.json();
        })
        .then(data => {
          const charaName = document.getElementById('chara-name');
          const hairSelect = document.getElementById('hair-select');
          const eyeSelect = document.getElementById('eye-select');
          const typeSelect = document.getElementById('archetype-select');

          if (data.chara.length > 0) {
            charaName.value = data.chara[0].chara_name;
            hairSelect.value = data.chara[0].chara_hair;
            eyeSelect.value = data.chara[0].chara_eyes;
            typeSelect.value = data.chara[0].chara_type;
            displayTypeHelp();
          }
        })
        .catch(error => {
          console.error('Task GET error:', error);
        });        
      }

      function createNewTaskElement(taskID,taskDescription,taskDone) {
        const newTask = document.createElement('li');

        newTask.setAttribute('class','list-group-item d-flex justify-content-between align-items-center');
        newTask.setAttribute('data-task-id',taskID);
        newTask.setAttribute('data-task-done',taskDone);

        if(taskDone == 0) {
          newTask.innerHTML = `
          <input class="form-check-input me-1" type="checkbox" value="" id="taskCheckbox${taskID}">
          <div id="task-desc${taskID}">${taskDescription}</div>
          <span class="badge text-bg-light rounded-pill shadow-sm" style="font-size:12pt;">&times;</span>`;
        } else {
          newTask.innerHTML = `
          <input class="form-check-input me-1" type="checkbox" value="" id="taskCheckbox${taskID}" checked disabled>
          <div id="task-desc${taskID}"><s>${taskDescription}</s></div>
          <span class="badge text-bg-light rounded-pill shadow-sm" style="font-size:12pt;">&times;</span>`;
        }

        return newTask;
      }

      function insertIntoList(item, list) {
        var firstComplete = null;
        
        for(var i = 0; i < list.children.length; i++) {
          if(list.children[i].getAttribute('data-task-done') == 1) {
            firstComplete = list.children[i];
            break;
          }
        }

        if(firstComplete !== null) {
          item.remove();
          list.insertBefore(item, firstComplete);
        } else {
          list.append(item);
        }
      }

      function addTaskToDB(taskDescription) {

        fetch(window.location.origin + '/tasks/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ "task_desc": taskDescription, "user_id": '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          const taskList = document.getElementById('task-list');

          const newElement = createNewTaskElement(data.task_id, taskDescription, 0);
          insertIntoList(newElement, taskList);

        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      }

      function showRewardToast() {
        const rewardToast = document.getElementById('reward-toast');
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(rewardToast);
        toastBootstrap.show();
      }

      async function generateRewardContent(taskDesc) {
        const charaName = document.getElementById('chara-name');
        const hairSelect = document.getElementById('hair-select');
        const eyeSelect = document.getElementById('eye-select');
        const typeSelect = document.getElementById('archetype-select');

        // Save rewards content.
        const formData = new FormData();
        formData.append('user_id', '1');
        formData.append("chara_name",charaName.value);
        formData.append("chara_hair", hairSelect.value);
        formData.append("chara_eyes", eyeSelect.value);
        formData.append("chara_type", typeSelect.value);
        formData.append("task_desc", taskDesc);
        const json = JSON.stringify(Object.fromEntries(formData));

        fetch(window.location.origin + '/rewards/create',{
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: json, 
        }).then(response => {
          if (!response.ok) {
            console.log(response)
            throw new Error('Database response was not OK');
          }
          return response.json();
        }).then(data => {
          console.log(data);

          showRewardToast();
          document.getElementById("rewards-badge").style.display = "block";

        }).catch(error => {
          console.error('Database GET error:', error);
        })

        /*
        const url = new URL(window.location.origin + '/openai/get');
        url.search = new URLSearchParams({
          "chara_name": charaName.value, 
          "chara_hair": hairSelect.value,
          "chara_eyes": eyeSelect.value,
          "chara_type": typeSelect.value, 
          "task_desc": taskDesc,
        });
        fetch(url.toString(),{
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }).then(response => {
          if (!response.ok) {
            throw new Error('OpenAI response was not OK');
          }
          return response.json();
        }).then(data => {
            document.getElementById("chara-modal-img").src = `data:image/jpeg;base64,${data.image}`;
            document.getElementById("chara-modal-text").innerHTML = `<div class="col-10" style="height: 175px; overflow: scroll;"><p>${data.text}</p></div>`;
            var charaModal = document.getElementById("chara-modal");
            var charaModalPopup = new bootstrap.Modal(charaModal, {});
            charaModalPopup.show();
        }).catch(error => {
          console.error('OpenAI GET error:', error);
          document.getElementById("chara-modal-text").innerHTML = "";
          document.getElementById("chara-modal-img").src = "";
        });*/
      }

      function markTaskAsClosedInDB(taskID) {
        const taskDesc = document.getElementById('task-desc'+taskID).innerHTML;

        fetch(window.location.origin + '/tasks/closed', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ "task_id": taskID, "user_id": '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Task response was not OK');
          }
          return response.json();
        })
        .then(data => {

          generateRewardContent(taskDesc);

        })
        .catch(error => {
          console.error('Task POST error:', error);
        });
      }

      function deleteTaskFromDB (taskID) {

        fetch(window.location.origin + '/tasks/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ "task_id": taskID, "user_id": '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          //console.log(data);
        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      }

      document.getElementById('new-task-form').addEventListener('submit', function(event) {
        event.preventDefault();

        const taskDesc = document.getElementById('new-task-input').value;
        addTaskToDB(taskDesc);

        event.target.reset();
      });

      document.getElementById('task-list').addEventListener('click', function(event){
        const listItem = event.target.closest('li');
        const taskID = listItem.getAttribute('data-task-id');
        const taskList = document.getElementById('task-list');

        if(listItem != undefined) {
          if (event.target.tagName == 'INPUT') {     

            markTaskAsClosedInDB(taskID);

            const input = listItem.getElementsByTagName('input')[0];
            input.disabled = true;
            input.checked = true;
            const taskDesc = document.getElementById('task-desc'+taskID);
            taskDesc.innerHTML = `<s>${taskDesc.innerHTML}</s>`;

            insertIntoList(listItem, taskList);
            listItem.setAttribute('data-task-done',1);

          } else if (event.target.tagName == 'SPAN') {
            deleteTaskFromDB(taskID);
            listItem.remove();
          }
        }

      });

      document.getElementById('tasks-button').addEventListener('click', function(event){
        showTasksSpace();
      });

      function showTasksSpace() {
        const tasksSpace = document.getElementById('tasks-space');
        const rewardsSpace = document.getElementById('rewards-space');
        const settingsSpace = document.getElementById('settings-space');

        tasksSpace.style.display = 'block';
        rewardsSpace.style.display = 'none';
        settingsSpace.style.display = 'none';
      }

      document.getElementById('rewards-button').addEventListener('click', function(event){
        const tasksSpace = document.getElementById('tasks-space');
        const rewardsSpace = document.getElementById('rewards-space');
        const settingsSpace = document.getElementById('settings-space');
              
        rewardsSpace.style.display = 'block';
        tasksSpace.style.display = 'none';
        settingsSpace.style.display = 'none';

        document.getElementById('rewards-badge').style.display = 'none';
      });

      document.getElementById('settings-button').addEventListener('click', function(event){
        const tasksSpace = document.getElementById('tasks-space');
        const rewardsSpace = document.getElementById('rewards-space');
        const settingsSpace = document.getElementById('settings-space'); 

        settingsSpace.style.display = 'block';
        rewardsSpace.style.display = 'none';
        tasksSpace.style.display = 'none';
      });

      document.getElementById('chara-edit-form').addEventListener('submit', function(event) {
        event.preventDefault();

        const formData = new FormData(event.target);
        formData.append("chara_id",'1');
        formData.append("user_id",'1'); // TODO: User management.

        const json = JSON.stringify(Object.fromEntries(formData));
 
        fetch(window.location.origin + '/chara/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: json, 
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Chara response was not OK');
          }
          return response.json();
        })
        .then(data => {
          //console.log(data);
          showTasksSpace();
        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      });

    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  </body>
</html>
