<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <title><%= title %></title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />

    <style>
      html {
        height: 100%;
        width: 100%;
      }

      body {
        height: 100%;
        background-color:  #ffd1e8;
        font: Helvetica, sans-serif;
      }

      a {
        color: #00B7FF;
      }

      #settings-space {
        background-color: white; 
        height: 100%; 
      }
      
      #settings-button:hover {
        cursor: pointer;
      }

      span:hover {
        cursor: pointer;
      }

      button:hover {
        cursor: pointer;
      }

      #main-navbar {
        background-color: #ffd1e8;
      }
      
    </style>

  </head>
  <body onload="appSetup()">

    <!--<h1><%= title %></h1>
    <p>Welcome to <%= title %></p>-->

    <nav id="main-navbar" class="navbar shadow-sm">
      <div class="container-fluid">
        <a class="navbar-brand" style="color: black; font-size: 12pt;">&hearts; Love & Lists</a>
        <svg id="settings-button" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16">
          <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
        </svg>
      </div>
    </nav>

    <div class="modal fade" id="chara-modal" tabindex="-1" aria-labelledby="chara-modal-label" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <!--<h1 class="modal-title fs-5" id="chara-modal-label">Modal title</h1>-->
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="row justify-content-center">
              <img src="#" style="height: 275px; object-fit: cover;">
            </div>
            <div class="row mt-3 justify-content-center" style="height: 175px; overflow: scroll;">
              <div class="col-10">
                <p id="chara-modal-text"></p>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-sm btn-secondary shadow-sm" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <div id="settings-space" class="container pt-3" style="display: none;">

      <div class="row justify-content-center">
        <div class="col-10 col-md-6">
          <form id="chara-edit-form">
            <div class="mb-2">
              <!--<label for="chara-name" class="form-label">Character Name</label>-->
              <input type="text" class="form-control" id="chara-name" name="chara_name">
            </div>

            <div class="mb-2">
              <select id="hair-select" name="hair_color" class="form-select" aria-label="Hair Color">
                <option value="" selected>Choose a hair color</option>
              </select>
            </div>

            <div class="mb-2">
              <select id="eye-select" name="eye_color" class="form-select" aria-label="Eye Color">
                <option value="" selected>Choose an eye color</option>
              </select>
            </div>

            <div class="mb-2">
              <select id="archetype-select" name="chara_type" class="form-select" aria-label="Character Archetype" onchange="displayTypeDesc()">
                <option value="" selected>Choose an archetype</option>
              </select>
            </div>
            
            <div style="text-align: left;">
              <button type="submit" class="btn btn-sm btn-primary shadow-sm">Submit</button>
            </div>
          </form>
        </div>
      </div>

      <div class="row mt-3 justify-content-center">
        <div class="col-10 col-md-6">
          <p id="type-desc"></p>
        </div>
      </div>

    </div>

    <div id="tasks-space" class="container mt-3" style="display: block;">

      <div class="row justify-content-center" >
        <div class="col-10 col-md-6 text-center rounded shadow-sm" style="background-color: white;">

          <div class="row mt-3 justify-content-center">
            <div class="col">
              <form id="new-task-form">
                <div class="mb-2">
                  <label for="new-task-input" class="form-label">To-Do</label>
                  <input type="text" class="form-control" id="new-task-input" aria-describedby="new-task-help">
                  <div id="new-task-help" class="form-text"></div>
                </div>
                <div style="text-align: left;">
                  <button type="submit" class="btn btn-sm btn-primary shadow-sm">Add</button>
                </div>
              </form>
            </div>
          </div>
    
          <hr>
    
          <div class="row justify-content-center" style="min-height: 750px;">
            <div class="col">
              <ul id="task-list" class="list-group list-group-flush">
              </ul>
            </div>
          </div>
          
        </div>
      </div>

    </div>

    <script>
      const taskForm = document.getElementById('new-task-form');
      const taskList = document.getElementById('task-list');
      const settingsButton = document.getElementById('settings-button');
      const charaForm = document.getElementById('chara-edit-form');
      const charaName = document.getElementById('chara-name');
      const hairSelect = document.getElementById('hair-select');
      const eyeSelect = document.getElementById('eye-select');
      const typeSelect = document.getElementById('archetype-select');
      const typeDescDisplay = document.getElementById('type-desc');
      const charaTypeDesc = ['',
      'An introverted character who becomes more expressive around someone they trust.'
      ,'A character who is consistently sweet, affectionate, and cheerful.'
      ,'A character that is outwardly aloof but secretly compassionate.'
      ,'A character who playfully teases others.'
      ,'A character that starts off as cold and aloof but later become warm and affectionate.'];

      function appSetup() {
        buildSettingsForm();
        loadTasks();
        loadChara();
      }

      function buildSettingsForm() {
        hairColors = ['Black','Blonde','Brown','Red','White'];
        eyeColors = ['Blue','Brown','Green','Gray','Hazel'];
        charaTypes = ['Dandere','Deredere','Kuudere','Teasedere','Tsundere'];

        for(var i = 0; i < hairColors.length; i++) {
          const newOption = document.createElement('option');
          newOption.value = hairColors[i];
          newOption.text = hairColors[i];
          hairSelect.append(newOption);
        }

        for(var i = 0; i < eyeColors.length; i++) {
          const newOption = document.createElement('option');
          newOption.value = eyeColors[i];
          newOption.text = eyeColors[i];
          eyeSelect.append(newOption);
        }

        for(var i = 0; i < charaTypes.length; i++) {
          const newOption = document.createElement('option');
          newOption.value = charaTypes[i];
          newOption.text = charaTypes[i];
          typeSelect.append(newOption);
        }     
      }

      function displayTypeDesc() {
        const typeIndex = typeSelect.selectedIndex;
        typeDescDisplay.innerHTML = charaTypeDesc[typeIndex];
      }

      function loadTasks() {
        fetch('http://localhost:3000/tasks/get?user_id=1')
        .then(response => {
          if (!response.ok) {
            throw new Error('Task response was not OK');
          }
          return response.json();
        })
        .then(data => {
          //console.log(data);
          for(row in data.tasks) {
            const newElement = createNewTaskElement(data.tasks[row].task_id, data.tasks[row].task_desc, data.tasks[row].task_status);
            taskList.append(newElement);
          }

        })
        .catch(error => {
          console.error('Task GET error:', error);
        });
      };

      function loadChara() {
        fetch('http://localhost:3000/chara/get?chara_id=1&user_id=1')
        .then(response => {
          if (!response.ok) {
            throw new Error('Chara response was not OK');
          }
          return response.json();
        })
        .then(data => {
          if (data.chara.length > 0) {
            charaName.value = data.chara[0].chara_name;
            hairSelect.value = data.chara[0].chara_hair;
            eyeSelect.value = data.chara[0].chara_eyes;
            typeSelect.value = data.chara[0].chara_type;
            displayTypeDesc();
          }
        })
        .catch(error => {
          console.error('Task GET error:', error);
        });        
      }

      function createNewTaskElement(taskID,taskDescription,taskStatus) {
        const newTask = document.createElement('li');

        newTask.setAttribute('class','list-group-item d-flex justify-content-between align-items-center');
        newTask.setAttribute('data-task-id',taskID);
        newTask.setAttribute('data-task-status',taskStatus);

        if(taskStatus == 0) {
          newTask.innerHTML = `
          <input class="form-check-input me-1" type="checkbox" value="" id="taskCheckbox${taskID}">
          <div id="task-desc${taskID}">${taskDescription}</div>
          <span class="badge text-bg-light rounded-pill shadow-sm" style="font-size:12pt;">&times;</span>`;
        } else {
          newTask.innerHTML = `
          <input class="form-check-input me-1" type="checkbox" value="" id="taskCheckbox${taskID}" checked disabled>
          <div id="task-desc${taskID}"><s>${taskDescription}</s></div>
          <span class="badge text-bg-light rounded-pill shadow-sm" style="font-size:12pt;">&times;</span>`;
        }

        return newTask;
      }

      function insertIntoList(item, list) {
        var firstComplete = null;
        
        for(var i = 0; i < list.children.length; i++) {
          if(list.children[i].getAttribute('data-task-status') == 1) {
            firstComplete = list.children[i];
            break;
          }
        }

        if(firstComplete !== null) {
          item.remove();
          list.insertBefore(item, firstComplete);
        } else {
          list.append(item);
        }
      }

      function addTaskToDB(taskDescription) {

        fetch('http://localhost:3000/tasks/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ "task_desc": taskDescription, "user_id": '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {

          const newElement = createNewTaskElement(data.task_id, taskDescription, 0);
          insertIntoList(newElement, taskList);

        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      }

      function markTaskAsClosedInDB(taskID) {
        
        fetch('http://localhost:3000/tasks/closed', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ "task_id": taskID, "user_id": '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          console.log(data);

          var charaModal = document.getElementById("chara-modal");
          var charaModalPopup = new bootstrap.Modal(charaModal, {});
          charaModalPopup.show();

        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      }

      function deleteTaskFromDB (taskID) {

        fetch('http://localhost:3000/tasks/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ "task_id": taskID, "user_id": '1' }), // TODO: User management.
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          //console.log(data);
        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      }

      taskForm.addEventListener('submit', function(event) {
        event.preventDefault();

        const taskDesc = document.getElementById('new-task-input').value;
        addTaskToDB(taskDesc);

        taskForm.reset();
      });

      taskList.addEventListener('click', function(event){
        const listItem = event.target.closest('li');
        const taskID = listItem.getAttribute('data-task-id');

        if(listItem != undefined) {
          if (event.target.tagName == 'INPUT') {     
            setTimeout(function () {

              markTaskAsClosedInDB(taskID);

              const input = listItem.getElementsByTagName('input')[0];
              input.disabled = true;
              input.checked = true;

              const taskDesc = document.getElementById('task-desc'+taskID);
              taskDesc.innerHTML = `<s>${taskDesc.innerHTML}</s>`;

              insertIntoList(listItem, taskList);

              listItem.setAttribute('data-task-status',1);

            }, 1000);
          } else if (event.target.tagName == 'SPAN') {
            deleteTaskFromDB(taskID);
            listItem.remove();
          }
        }

      });

      settingsButton.addEventListener('click', function(event){
        showOrHideSettingsSpace();
      });

      function showOrHideSettingsSpace() {
        const settingsSpace = document.getElementById('settings-space');
        const tasksSpace = document.getElementById('tasks-space'); 

        if(settingsSpace.style.display == 'none') {
          settingsSpace.style.display = 'block';
          tasksSpace.style.display = 'none';
        } else {
          settingsSpace.style.display = 'none';
          tasksSpace.style.display = 'block';
        }
      }

      charaForm.addEventListener('submit', function(event) {
        event.preventDefault();

        const formData = new FormData(event.target);
        formData.append("chara_id",'1');
        formData.append("user_id",'1'); // TODO: User management.

        const json = JSON.stringify(Object.fromEntries(formData));
 
        fetch('http://localhost:3000/chara/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: json, 
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Chara response was not OK');
          }
          return response.json();
        })
        .then(data => {
          console.log(data);
          showOrHideSettingsSpace();
        })
        .catch(error => {
          console.error('Task POST error:', error);
        });

      });

    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  </body>
</html>
